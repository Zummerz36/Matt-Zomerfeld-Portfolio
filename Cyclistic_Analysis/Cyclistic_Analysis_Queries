-- -- calculate the average difference between "start_time" and "end_time" in Cyclistic_Annual_Clean. present results in hh:mm:ss format
SELECT
  FORMAT_TIME( '%H:%M:%S', TIME( TIMESTAMP_SECONDS( CAST(AVG(TIMESTAMP_DIFF(end_time, start_time, SECOND)) AS INT64)))) AS average_difference
FROM
  `cyclistic-case-study-466019`.`Cyclystic_User_Data_Clean`.`Cyclistic_Annual_Clean`;



-- Calculate maximum ride_time
SELECT
  MAX(ride_time) AS max_ride_time
FROM
  `cyclistic-case-study-466019.Cyclystic_User_Data_Clean.Cyclistic_Annual_Clean`;



-- calculate the mode of "ride_time" in Cyclistic_Annual_Clean
SELECT
  ride_time
FROM
  `cyclistic-case-study-466019`.`Cyclystic_User_Data_Clean`.`Cyclistic_Annual_Clean`
GROUP BY
  ride_time
ORDER BY
  COUNT(ride_time) DESC
LIMIT
  1;

-- calculate the average "ride_time" for each week day
SELECT
  weekday,
  FORMAT_TIME( '%H:%M:%S', TIME_ADD( TIME '00:00:00', INTERVAL CAST(AVG(TIMESTAMP_DIFF(end_time, start_time, SECOND)) AS INT64) SECOND)) AS average_ride_duration
FROM
  `cyclistic-case-study-466019`.`Cyclystic_User_Data_Clean`.`Cyclistic_Annual_Clean`
GROUP BY
  weekday
ORDER BY
  weekday;

-- calculate average number of "ride_id" for each hour of the day in Cyclistic_Annual_Clean
SELECT
  EXTRACT(HOUR
  FROM
    start_time) AS hour_of_day,
  CAST(COUNT(trip_id) AS FLOAT64) / COUNT(DISTINCT DATE(start_time)) AS average_rides_per_day_in_hour
FROM
  `cyclistic-case-study-466019`.`Cyclystic_User_Data_Clean`.`Cyclistic_Annual_Clean`
GROUP BY
  hour_of_day
ORDER BY
  hour_of_day;



-- 1. calculate the average "ride_time" for each week day for Cyclistic_Q1_Clean, Cyclistic_Q2_Clean, Cyclistic_Q3_Clean, and Cyclistic_Q4_Clean
-- 2. create a seperate column for each table
-- present in hh:mm:ss format
SELECT
  COALESCE(q1.weekday, q2.weekday, q3.weekday, q4.weekday) AS weekday,
  FORMAT_TIME( '%H:%M:%S', TIME_ADD( TIME(0, 0, 0), INTERVAL CAST(q1.average_ride_time_q1 AS INT64) SECOND)) AS average_ride_time_q1,
  FORMAT_TIME( '%H:%M:%S', TIME_ADD( TIME(0, 0, 0), INTERVAL CAST(q2.average_ride_time_q2 AS INT64) SECOND)) AS average_ride_time_q2,
  FORMAT_TIME( '%H:%M:%S', TIME_ADD( TIME(0, 0, 0), INTERVAL CAST(q3.average_ride_time_q3 AS INT64) SECOND)) AS average_ride_time_q3,
  FORMAT_TIME( '%H:%M:%S', TIME_ADD( TIME(0, 0, 0), INTERVAL CAST(q4.average_ride_time_q4 AS INT64) SECOND)) AS average_ride_time_q4
FROM (
  SELECT
    weekday,
    AVG( CAST(SPLIT(ride_time, ':')[
      OFFSET
        (0)] AS INT64) * 3600 + CAST(SPLIT(ride_time, ':')[
      OFFSET
        (1)] AS INT64) * 60 + CAST(SPLIT(ride_time, ':')[
      OFFSET
        (2)] AS INT64)) AS average_ride_time_q1
  FROM
    `cyclistic-case-study-466019`.`Cyclystic_User_Data_Clean`.`Cyclistic_Q1_Clean`
  GROUP BY
    weekday ) AS q1
FULL OUTER JOIN (
  SELECT
    weekday,
    AVG( CAST(SPLIT(ride_time, ':')[
      OFFSET
        (0)] AS INT64) * 3600 + CAST(SPLIT(ride_time, ':')[
      OFFSET
        (1)] AS INT64) * 60 + CAST(SPLIT(ride_time, ':')[
      OFFSET
        (2)] AS INT64)) AS average_ride_time_q2
  FROM
    `cyclistic-case-study-466019`.`Cyclystic_User_Data_Clean`.`Cyclistic_Q2_Clean`
  GROUP BY
    weekday ) AS q2
ON
  q1.weekday = q2.weekday
FULL OUTER JOIN (
  SELECT
    weekday,
    AVG( CAST(SPLIT(ride_time, ':')[
      OFFSET
        (0)] AS INT64) * 3600 + CAST(SPLIT(ride_time, ':')[
      OFFSET
        (1)] AS INT64) * 60 + CAST(SPLIT(ride_time, ':')[
      OFFSET
        (2)] AS INT64)) AS average_ride_time_q3
  FROM
    `cyclistic-case-study-466019`.`Cyclystic_User_Data_Clean`.`Cyclistic_Q3_Clean`
  GROUP BY
    weekday ) AS q3
ON
  COALESCE(q1.weekday, q2.weekday) = q3.weekday
FULL OUTER JOIN (
  SELECT
    weekday,
    AVG( CAST(SPLIT(ride_time, ':')[
      OFFSET
        (0)] AS INT64) * 3600 + CAST(SPLIT(ride_time, ':')[
      OFFSET
        (1)] AS INT64) * 60 + CAST(SPLIT(ride_time, ':')[
      OFFSET
        (2)] AS INT64)) AS average_ride_time_q4
  FROM
    `cyclistic-case-study-466019`.`Cyclystic_User_Data_Clean`.`Cyclistic_Q4_Clean`
  GROUP BY
    weekday ) AS q4
ON
  COALESCE(q1.weekday, q2.weekday, q3.weekday) = q4.weekday
ORDER BY
  COALESCE(q1.weekday, q2.weekday, q3.weekday, q4.weekday);



-- count the number of rows in each table in Cyclistic_User_Data_Clean
SELECT
  'Cyclistic_Q1_Clean' AS table_name,
  COUNT(*) AS row_count
FROM
  `cyclistic-case-study-466019`.`Cyclystic_User_Data_Clean`.`Cyclistic_Q1_Clean`
UNION ALL
SELECT
  'Cyclistic_Q4_Clean' AS table_name,
  COUNT(*) AS row_count
FROM
  `cyclistic-case-study-466019`.`Cyclystic_User_Data_Clean`.`Cyclistic_Q4_Clean`
UNION ALL
SELECT
  'Cyclistic_Q3_Clean' AS table_name,
  COUNT(*) AS row_count
FROM
  `cyclistic-case-study-466019`.`Cyclystic_User_Data_Clean`.`Cyclistic_Q3_Clean`
UNION ALL
SELECT
  'Cyclistic_Annual_Clean' AS table_name,
  COUNT(*) AS row_count
FROM
  `cyclistic-case-study-466019`.`Cyclystic_User_Data_Clean`.`Cyclistic_Annual_Clean`
UNION ALL
SELECT
  'Cyclistic_Q2_Clean' AS table_name,
  COUNT(*) AS row_count
FROM
  `cyclistic-case-study-466019`.`Cyclystic_User_Data_Clean`.`Cyclistic_Q2_Clean`;




-- 1. count the number of rows listed as customers and subscribers in each table in cyclistic-case-study-466019.Cyclystic_User_Data_Clean
-- SELECT
-- 2. put customer and subscriber counts in different columns
SELECT
  'Cyclistic_Q1_Clean' AS table_name,
  COUNT(CASE
      WHEN user_type = 'Customer' THEN 1
  END
    ) AS customer_count,
  COUNT(CASE
      WHEN user_type = 'Subscriber' THEN 1
  END
    ) AS subscriber_count
FROM
  `cyclistic-case-study-466019`.`Cyclystic_User_Data_Clean`.`Cyclistic_Q1_Clean`
UNION ALL
SELECT
  'Cyclistic_Q2_Clean' AS table_name,
  COUNT(CASE
      WHEN user_type = 'Customer' THEN 1
  END
    ) AS customer_count,
  COUNT(CASE
      WHEN user_type = 'Subscriber' THEN 1
  END
    ) AS subscriber_count
FROM
  `cyclistic-case-study-466019`.`Cyclystic_User_Data_Clean`.`Cyclistic_Q2_Clean`
UNION ALL
SELECT
  'Cyclistic_Q3_Clean' AS table_name,
  COUNT(CASE
      WHEN user_type = 'Customer' THEN 1
  END
    ) AS customer_count,
  COUNT(CASE
      WHEN user_type = 'Subscriber' THEN 1
  END
    ) AS subscriber_count
FROM
  `cyclistic-case-study-466019`.`Cyclystic_User_Data_Clean`.`Cyclistic_Q3_Clean`
UNION ALL
SELECT
  'Cyclistic_Q4_Clean' AS table_name,
  COUNT(CASE
      WHEN user_type = 'Customer' THEN 1
  END
    ) AS customer_count,
  COUNT(CASE
      WHEN user_type = 'Subscriber' THEN 1
  END
    ) AS subscriber_count
FROM
  `cyclistic-case-study-466019`.`Cyclystic_User_Data_Clean`.`Cyclistic_Q4_Clean`
UNION ALL
SELECT
  'Cyclistic_Annual_Clean' AS table_name,
  COUNT(CASE
      WHEN user_type = 'Customer' THEN 1
  END
    ) AS customer_count,
  COUNT(CASE
      WHEN user_type = 'Subscriber' THEN 1
  END
    ) AS subscriber_count
FROM
  `cyclistic-case-study-466019`.`Cyclystic_User_Data_Clean`.`Cyclistic_Annual_Clean`
ORDER BY
  table_name;





-- calculate the average difference between "start_time" and "end_time" of rows listed as customers in the "user_type" column in Cyclistic_Annual_Clean. present results in hh:mm:ss format
SELECT
  FORMAT_TIME( '%H:%M:%S', TIME_ADD( TIME '00:00:00', INTERVAL CAST(AVG(TIMESTAMP_DIFF(end_time, start_time, SECOND)) AS INT64) SECOND)) AS average_ride_duration
FROM
  `cyclistic-case-study-466019`.`Cyclystic_User_Data_Clean`.`Cyclistic_Annual_Clean`
WHERE
  user_type = 'Customer';


-- calculate the average difference between "start_time" and "end_time" of rows listed as subscriber in the "user_type" column in Cyclistic_Annual_Clean. present results in hh:mm:ss format
SELECT
  FORMAT_TIME( '%H:%M:%S', TIME_ADD( TIME '00:00:00', INTERVAL CAST(AVG(TIMESTAMP_DIFF(end_time, start_time, SECOND)) AS INT64) SECOND)) AS average_ride_duration
FROM
  `cyclistic-case-study-466019`.`Cyclystic_User_Data_Clean`.`Cyclistic_Annual_Clean`
WHERE
  user_type = 'Subscriber';



-- calculate the maximum "ride_time" of rows listed as "Customer" in "user_type" in "Cyclistic_Annual_Clean"
SELECT
  MAX(ride_time) AS max_ride_time
FROM
  `cyclistic-case-study-466019`.`Cyclystic_User_Data_Clean`.`Cyclistic_Annual_Clean`
WHERE
  user_type = 'Customer';

SELECT
  MAX(ride_time) AS max_ride_time
FROM
  `cyclistic-case-study-466019`.`Cyclystic_User_Data_Clean`.`Cyclistic_Annual_Clean`
WHERE
  user_type = 'Subscriber';




-- calculate the mode of "ride_time" for rows marked Customer and Subscriber in Cyclistic_Annual_Clean
SELECT
  user_type,
  ride_time
FROM (
  SELECT
    user_type,
    ride_time,
    COUNT(ride_time) AS ride_time_count,
    ROW_NUMBER() OVER (PARTITION BY user_type ORDER BY COUNT(ride_time) DESC) AS rn
  FROM
    `cyclistic-case-study-466019`.`Cyclystic_User_Data_Clean`.`Cyclistic_Annual_Clean`
  WHERE
    user_type IN ('Customer',
      'Subscriber')
  GROUP BY
    user_type,
    ride_time ) AS subquery
WHERE
  rn = 1;



-- count the number of rows listed as "customer" for each hour of the day in each table from Cyclistic_User_Data_Clean
SELECT
  'Cyclistic_Q1_Clean' AS table_name,
  EXTRACT(HOUR
  FROM
    t0.start_time) AS trip_hour,
  COUNT(t0.trip_id) AS count_of_customers
FROM
  `cyclistic-case-study-466019`.`Cyclystic_User_Data_Clean`.`Cyclistic_Q1_Clean` AS t0
WHERE
  LOWER(t0.user_type) = 'customer'
GROUP BY
  table_name,
  trip_hour
UNION ALL
SELECT
  'Cyclistic_Q2_Clean' AS table_name,
  EXTRACT(HOUR
  FROM
    t1.start_time) AS trip_hour,
  COUNT(t1.trip_id) AS count_of_customers
FROM
  `cyclistic-case-study-466019`.`Cyclystic_User_Data_Clean`.`Cyclistic_Q2_Clean` AS t1
WHERE
  LOWER(t1.user_type) = 'customer'
GROUP BY
  table_name,
  trip_hour
UNION ALL
SELECT
  'Cyclistic_Q3_Clean' AS table_name,
  EXTRACT(HOUR
  FROM
    t2.start_time) AS trip_hour,
  COUNT(t2.trip_id) AS count_of_customers
FROM
  `cyclistic-case-study-466019`.`Cyclystic_User_Data_Clean`.`Cyclistic_Q3_Clean` AS t2
WHERE
  LOWER(t2.user_type) = 'customer'
GROUP BY
  table_name,
  trip_hour
UNION ALL
SELECT
  'Cyclistic_Q4_Clean' AS table_name,
  EXTRACT(HOUR
  FROM
    t3.start_time) AS trip_hour,
  COUNT(t3.trip_id) AS count_of_customers
FROM
  `cyclistic-case-study-466019`.`Cyclystic_User_Data_Clean`.`Cyclistic_Q4_Clean` AS t3
WHERE
  LOWER(t3.user_type) = 'customer'
GROUP BY
  table_name,
  trip_hour
UNION ALL
SELECT
  'Cyclistic_Annual_Clean' AS table_name,
  EXTRACT(HOUR
  FROM
    t4.start_time) AS trip_hour,
  COUNT(t4.trip_id) AS count_of_customers
FROM
  `cyclistic-case-study-466019`.`Cyclystic_User_Data_Clean`.`Cyclistic_Annual_Clean` AS t4
WHERE
  LOWER(t4.user_type) = 'customer'
GROUP BY
  table_name,
  trip_hour
ORDER BY
  table_name,
  trip_hour;



-- count the number of rows listed as "subscriber" for each hour of the day in each table from Cyclistic_User_Data_Clean
-- seperate results into a column for each table
SELECT
  COALESCE( q1.trip_hour, q2.trip_hour, q3.trip_hour, q4.trip_hour, annual.trip_hour) AS trip_hour,
  q1.subscriber_trip_count AS Q1_subscriber_trip_count,
  q2.subscriber_trip_count AS Q2_subscriber_trip_count,
  q3.subscriber_trip_count AS Q3_subscriber_trip_count,
  q4.subscriber_trip_count AS Q4_subscriber_trip_count,
  annual.subscriber_trip_count AS Annual_subscriber_trip_count
FROM (
  SELECT
    EXTRACT(HOUR
    FROM
      start_time) AS trip_hour,
    COUNT(trip_id) AS subscriber_trip_count
  FROM
    `cyclistic-case-study-466019`.`Cyclystic_User_Data_Clean`.`Cyclistic_Q1_Clean`
  WHERE
    LOWER(user_type) = 'subscriber'
  GROUP BY
    trip_hour ) AS q1
FULL OUTER JOIN (
  SELECT
    EXTRACT(HOUR
    FROM
      start_time) AS trip_hour,
    COUNT(trip_id) AS subscriber_trip_count
  FROM
    `cyclistic-case-study-466019`.`Cyclystic_User_Data_Clean`.`Cyclistic_Q2_Clean`
  WHERE
    LOWER(user_type) = 'subscriber'
  GROUP BY
    trip_hour ) AS q2
ON
  q1.trip_hour = q2.trip_hour
FULL OUTER JOIN (
  SELECT
    EXTRACT(HOUR
    FROM
      start_time) AS trip_hour,
    COUNT(trip_id) AS subscriber_trip_count
  FROM
    `cyclistic-case-study-466019`.`Cyclystic_User_Data_Clean`.`Cyclistic_Q3_Clean`
  WHERE
    LOWER(user_type) = 'subscriber'
  GROUP BY
    trip_hour ) AS q3
ON
  COALESCE(q1.trip_hour, q2.trip_hour) = q3.trip_hour
FULL OUTER JOIN (
  SELECT
    EXTRACT(HOUR
    FROM
      start_time) AS trip_hour,
    COUNT(trip_id) AS subscriber_trip_count
  FROM
    `cyclistic-case-study-466019`.`Cyclystic_User_Data_Clean`.`Cyclistic_Q4_Clean`
  WHERE
    LOWER(user_type) = 'subscriber'
  GROUP BY
    trip_hour ) AS q4
ON
  COALESCE(q1.trip_hour, q2.trip_hour, q3.trip_hour) = q4.trip_hour
FULL OUTER JOIN (
  SELECT
    EXTRACT(HOUR
    FROM
      start_time) AS trip_hour,
    COUNT(trip_id) AS subscriber_trip_count
  FROM
    `cyclistic-case-study-466019`.`Cyclystic_User_Data_Clean`.`Cyclistic_Annual_Clean`
  WHERE
    LOWER(user_type) = 'subscriber'
  GROUP BY
    trip_hour ) AS annual
ON
  COALESCE(q1.trip_hour, q2.trip_hour, q3.trip_hour, q4.trip_hour) = annual.trip_hour
ORDER BY
  trip_hour;



-- determine the number of customers vs subscribers per each day of the week in Cyclistic_Annual_Clean
SELECT
  weekday,
  user_type,
  COUNT(trip_id) AS count_of_rides
FROM
  `cyclistic-case-study-466019`.`Cyclystic_User_Data_Clean`.`Cyclistic_Annual_Clean`
GROUP BY
  weekday,
  user_type
ORDER BY
  weekday,
  user_type;


-- show distinct  from_station_names for Cyclistic_Annual_Clean
SELECT
  DISTINCT from_station_name
FROM
  `cyclistic-case-study-466019`.`Cyclystic_User_Data_Clean`.`Cyclistic_Annual_Clean`;



-- count number of rows for each from_station_name in for each table in "Cyclistic_User_Data_Clean"
-- display results of each table as its own column
SELECT
  from_station_name,
  SUM(CASE
      WHEN table_name = 'Cyclistic_Annual_Clean' THEN row_count
      ELSE 0
  END
    ) AS Cyclistic_Annual_Clean_count,
  SUM(CASE
      WHEN table_name = 'Cyclistic_Q3_Clean' THEN row_count
      ELSE 0
  END
    ) AS Cyclistic_Q3_Clean_count,
  SUM(CASE
      WHEN table_name = 'Cyclistic_Q1_Clean' THEN row_count
      ELSE 0
  END
    ) AS Cyclistic_Q1_Clean_count,
  SUM(CASE
      WHEN table_name = 'Cyclistic_Q4_Clean' THEN row_count
      ELSE 0
  END
    ) AS Cyclistic_Q4_Clean_count,
  SUM(CASE
      WHEN table_name = 'Cyclistic_Q2_Clean' THEN row_count
      ELSE 0
  END
    ) AS Cyclistic_Q2_Clean_count
FROM (
  SELECT
    'Cyclistic_Annual_Clean' AS table_name,
    from_station_name,
    COUNT(*) AS row_count
  FROM
    `cyclistic-case-study-466019`.`Cyclystic_User_Data_Clean`.`Cyclistic_Annual_Clean`
  GROUP BY
    from_station_name
  UNION ALL
  SELECT
    'Cyclistic_Q3_Clean' AS table_name,
    from_station_name,
    COUNT(*) AS row_count
  FROM
    `cyclistic-case-study-466019`.`Cyclystic_User_Data_Clean`.`Cyclistic_Q3_Clean`
  GROUP BY
    from_station_name
  UNION ALL
  SELECT
    'Cyclistic_Q1_Clean' AS table_name,
    from_station_name,
    COUNT(*) AS row_count
  FROM
    `cyclistic-case-study-466019`.`Cyclystic_User_Data_Clean`.`Cyclistic_Q1_Clean`
  GROUP BY
    from_station_name
  UNION ALL
  SELECT
    'Cyclistic_Q4_Clean' AS table_name,
    from_station_name,
    COUNT(*) AS row_count
  FROM
    `cyclistic-case-study-466019`.`Cyclystic_User_Data_Clean`.`Cyclistic_Q4_Clean`
  GROUP BY
    from_station_name
  UNION ALL
  SELECT
    'Cyclistic_Q2_Clean' AS table_name,
    from_station_name,
    COUNT(*) AS row_count
  FROM
    `cyclistic-case-study-466019`.`Cyclystic_User_Data_Clean`.`Cyclistic_Q2_Clean`
  GROUP BY
    from_station_name ) AS subquery_results
GROUP BY
  from_station_name
ORDER BY
  from_station_name;



-- count number of rows for each from_station_name in for each table in "Cyclistic_User_Data_Clean". display results of each table as its own column. create seperate counts for customers and subscribers
SELECT
  from_station_name,
  COUNT(CASE
      WHEN source_table = 'Annual' AND user_type = 'Customer' THEN 1
  END
    ) AS annual_customer_count,
  COUNT(
    CASE
      WHEN source_table = 'Annual' AND user_type = 'Subscriber' THEN 1
  END
    ) AS annual_subscriber_count,
  COUNT(CASE
      WHEN source_table = 'Q1' AND user_type = 'Customer' THEN 1
  END
    ) AS q1_customer_count,
  COUNT(CASE
      WHEN source_table = 'Q1' AND user_type = 'Subscriber' THEN 1
  END
    ) AS q1_subscriber_count,
  COUNT(CASE
      WHEN source_table = 'Q2' AND user_type = 'Customer' THEN 1
  END
    ) AS q2_customer_count,
  COUNT(CASE
      WHEN source_table = 'Q2' AND user_type = 'Subscriber' THEN 1
  END
    ) AS q2_subscriber_count,
  COUNT(CASE
      WHEN source_table = 'Q3' AND user_type = 'Customer' THEN 1
  END
    ) AS q3_customer_count,
  COUNT(CASE
      WHEN source_table = 'Q3' AND user_type = 'Subscriber' THEN 1
  END
    ) AS q3_subscriber_count,
  COUNT(CASE
      WHEN source_table = 'Q4' AND user_type = 'Customer' THEN 1
  END
    ) AS q4_customer_count,
  COUNT(CASE
      WHEN source_table = 'Q4' AND user_type = 'Subscriber' THEN 1
  END
    ) AS q4_subscriber_count
FROM (
  SELECT
    from_station_name,
    user_type,
    'Annual' AS source_table
  FROM
    `cyclistic-case-study-466019`.`Cyclystic_User_Data_Clean`.`Cyclistic_Annual_Clean`
  UNION ALL
  SELECT
    from_station_name,
    user_type,
    'Q1' AS source_table
  FROM
    `cyclistic-case-study-466019`.`Cyclystic_User_Data_Clean`.`Cyclistic_Q1_Clean`
  UNION ALL
  SELECT
    from_station_name,
    user_type,
    'Q2' AS source_table
  FROM
    `cyclistic-case-study-466019`.`Cyclystic_User_Data_Clean`.`Cyclistic_Q2_Clean`
  UNION ALL
  SELECT
    from_station_name,
    user_type,
    'Q3' AS source_table
  FROM
    `cyclistic-case-study-466019`.`Cyclystic_User_Data_Clean`.`Cyclistic_Q3_Clean`
  UNION ALL
  SELECT
    from_station_name,
    user_type,
    'Q4' AS source_table
  FROM
    `cyclistic-case-study-466019`.`Cyclystic_User_Data_Clean`.`Cyclistic_Q4_Clean` ) AS combined_data
GROUP BY
  from_station_name
ORDER BY
  from_station_name;



-- count total number of distinct rows in Cyclistic_Annual_Clean
SELECT
  COUNT(DISTINCT trip_id) AS count_of_distinct_rows
FROM
  `cyclistic-case-study-466019`.`Cyclystic_User_Data_Clean`.`Cyclistic_Annual_Clean`;
